# our CI/CD workflow .yaml file

name: CI/CD workflow

on:
  workflow_dispatch:
    inputs:
      steps:
        description: 'Select which steps to run in the pipeline'
        required: true
        type: choice
        options:
          - integration
          - all
        default: all

jobs:
   integration:
      name: checks_and_tests
      if: ${{ github.event.inputs.steps == 'integration' || github.event.inputs.steps == 'all' }}
      runs-on: ubuntu-latest
      steps:
         - name: Checkout code repo
           # this action clones current repository to the VM where our job is running
           # https://github.com/actions/checkout
           uses: actions/checkout@v4
           
         - name: Setup uv
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install dependencies
           run: uv sync --group integration
           
         - name: Run ruff check
           run: uv run ruff check
           
         - name: Run pip-audit
           run: uv run pip-audit --vulnerability-service pypi

         - name: Run PyTest
           run: uv run pytest tests

   deployment:
      name: download_and_export_model
      needs: integration
      runs-on: ubuntu-latest
      if: ${{ github.event.inputs.steps == 'all' && needs.integration.result == 'success' }}
      steps:
         - name: Checkout code repo
           # this action clones current repository to the VM where our job is running
           # https://github.com/actions/checkout
           uses: actions/checkout@v4

         - name: Setup uv
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install dependencies
           run: uv sync --group deployment

         - name: Download model
           run: |
              source .venv/bin/activate
              python main.py --script download

         - name: Export model
           run: |
              source .venv/bin/activate
              python main.py --script export

         - name: Build Docker image
           run: docker build -t polish-sentiment-app-onnx:latest .

         - name: Set up AWS credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.ACCESSKEYID }}
             aws-secret-access-key: ${{ secrets.SECRETACCESSKEY }}
             aws-session-token: ${{ secrets.SESSIONTOKEN }}
             aws-region: us-east-2

         - name: Login to ECR
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v2
           with:
             mask-password: 'true'

         - name: Push Docker image
           env:
             REGISTRY: ${{ steps.login-ecr.outputs.registry }}
             REPOSITORY: ipum_lab3
             IMAGE_TAG: ${{ github.sha }}
           run: |
             docker tag polish-sentiment-app-onnx:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
             docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
